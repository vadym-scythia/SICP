#lang racket

(define (subsets s)
  (if (null? s)
      (list null)
      (let ((rest (subsets (cdr s))))
        (append rest (map (lambda (item) (if (null? item)
                                              (list (car s))
                                              (if (in-list? rest item)
                                                  (if (null? (cdr item))
                                                      (list (car s) (car item))
                                                      (append (list (car s)) (list (car item)) (cdr item)))
                                                  item)))
                          rest)))))

(define (in-list? list item)
  (let ((compare-with (if (null? (car list))
                          (car (car (cdr list)))
                          (car (car list))))
        (compare-item (car item)))
    (cond ((null? list)
           #f)
          ((= compare-with compare-item)
           #t)
          (else
           (in-list? (cdr list) item)))))

(define (get-item input)
  (define (get-item-iter input result)
    (cond ((not (pair? input))
           input)
          ((not (null? (cdr input)))
           (get-item-iter (cdr input) (list (car input) result)))
          ((null? (cdr input))
           (get-item-iter (car input) result))
          (else result)))
  (get-item-iter input (list)))
#lang racket
;util
(define (square x)
  (* x x))

(define (fib x)
  (cond ((= x 0) 0)
        ((= x 1) 1)
        ((< x 0) "(must (> x 0))")
        ((+ (fib(- x 1))
            (fib(- x 2))))))

; map

;(map square (list 1 2 3 4 5))

; filter
(define (filter predicate sequence)
  (cond ((null? sequence) (list))
        ((predicate (car sequence))
         (cons (car sequence)
               (filter predicate (cdr sequence))))
        (else (filter predicate (cdr sequence)))))

;(filter odd? (list 1 2 3 4 5))

; accumulate
(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

;(accumulate + 0 (list 1 2 3 4 5))
;(accumulate * 1 (list 1 2 3 4 5))
;(accumulate cons (list) (list 1 2 3 4 5))

; enumerate
(define (enumerate-interval low high)
  (if (> low high)
      (list)
      (cons low (enumerate-interval (+ low 1) high))))

;(enumerate-interval 2 5)

(define (enumerate-tree tree)
  (cond ((null? tree) (list))
        ((not (pair? tree)) (list tree))
        (else (append (enumerate-tree (car tree))
                      (enumerate-tree (cdr tree))))))

;(enumerate-tree (list 1 (list 2 (list 3 4)) 5))

; combination examples (signal-flow structure)

(define (sum-odd-squares tree)
  (accumulate +
              0
              (map square
                   (filter odd?
                           (enumerate-tree tree)))))

(define (even-fibs n)
  (accumulate cons
              (list)
              (filter even?
                      (map fib
                           (enumerate-interval 0 n)))))
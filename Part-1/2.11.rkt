#lang sicp

(define (make-interval a b) (cons a b))
(define (upper-bound interval) (cdr interval))
(define (lower-bound interval) (car interval))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (ben-mul-interval x y)
  (let ((x-lower (lower-bound x))
        (x-upper (upper-bound x))
        (y-lower (lower-bound y))
        (y-upper (upper-bound y)))
    (if (and (< x-lower 0) (> x-upper 0) (> y-lower 0) (> y-upper 0))
        (make-interval (* x-lower y-upper) (* x-upper y-upper))
    (if (and (< x-lower 0) (< x-upper 0) (> y-lower 0) (> y-upper 0))
        (make-interval (* x-lower y-upper) (* x-upper y-lower))
    (if (and (< x-lower 0) (< x-upper 0) (< y-lower 0) (> y-upper 0))
        (make-interval (* x-lower y-upper) (* x-lower y-lower))
    (if (and (< x-lower 0) (< x-upper 0) (< y-lower 0) (< y-upper 0))
        (make-interval (* x-upper y-upper) (* x-lower y-lower))
    (if (and (> x-lower 0) (> x-upper 0) (< y-lower 0) (> y-upper 0))
        (make-interval (* y-lower x-upper) (* x-upper y-upper))
    (if (and (> x-lower 0) (> x-upper 0) (< y-lower 0) (< y-upper 0))
        (make-interval (* y-lower x-upper) (* y-upper x-lower))
    (if (and (< x-lower 0) (> x-upper 0) (< y-lower 0) (< y-upper 0))
        (make-interval (* y-lower x-upper) (* y-lower x-lower))
    (if (and (> x-lower 0) (> x-upper 0) (> y-lower 0) (> y-upper 0))
        (make-interval (* y-lower x-upper) (* y-lower x-lower))
    (if (and (< x-lower 0) (> x-upper 0) (< y-lower 0) (> y-upper 0))
        (make-interval (min (* y-lower x-upper) (* x-lower y-upper)) (* x-upper y-upper)))))))))))))

; (- +) (+ +)
; (+ -) (+ +)
; (+ +) (- +)
; (+ +) (+ -)
; (+ -) (- -)
; (- +) (- -)
; (- -) (+ -)
; (- -) (- +)
; (+ +) (+ +) OR (- -) (- -)

; (- +) (+ +)